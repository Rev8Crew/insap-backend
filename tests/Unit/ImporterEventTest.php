<?php

namespace Tests\Unit;

use App\Enums\ActiveStatus;
use App\Modules\Appliance\Models\Appliance;
use App\Modules\Importer\Models\Importer\Importer;
use App\Modules\Importer\Models\Importer\ImporterDto;
use App\Modules\Importer\Models\ImporterEvents\ImporterEvent;
use App\Modules\Importer\Models\ImporterEvents\ImporterEventDto;
use App\Modules\Importer\Models\ImporterEvents\ImporterEventEvent;
use App\Modules\Importer\Models\ImporterEvents\ImporterEventInterpreter;
use App\Modules\Importer\Models\ImporterInterpreter\ImporterInterpreterGo;
use App\Modules\Importer\Models\ImporterInterpreter\ImporterInterpreterPhp;
use App\Modules\Importer\Models\ImporterInterpreter\ImporterInterpreterPython;
use App\Modules\Importer\Services\ImporterEventService;
use App\Modules\Importer\Services\ImporterService;
use Illuminate\Http\UploadedFile;
use Storage;
use Tests\TestCase;

class ImporterEventTest extends TestCase
{
    private ?Importer $importer = null;
    private ?ImporterService $importerService = null;

    private ?ImporterEvent $importerEvent = null;
    private ?ImporterEventService $importerEventService = null;

    private ?Appliance $appliance = null;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // TODO: change to ApplianceService
        $this->appliance = Appliance::create(['id' => Appliance::APPLIANCE_TEST_ID, 'name' => 'test']);

        // Create all services
        $this->importerService = $this->app->make(ImporterService::class);
        $this->importerEventService = $this->app->make(ImporterEventService::class);

        // Create Entities
        $this->importer = $this->importerService->create(new ImporterDto('testImporter', $this->appliance));
    }

    public function testCreate()
    {
        $this->assertTrue($this->createWithInterpreter(ImporterInterpreterPhp::class, 'importer_php.zip'));
        $this->assertTrue($this->createWithInterpreter(ImporterInterpreterPython::class, 'importer_python.zip'));
        $this->assertTrue($this->createWithInterpreter(ImporterInterpreterGo::class, 'importer_go.zip'));
    }

    public function testDelete()
    {
        $array = [
            'name' => null,
            'event' => ImporterEventEvent::EVENT_IMPORT,
            'interpreter_class' => ImporterInterpreterPhp::class,
        ];

        $this->importerEvent = $this->createBasicImporterEvent($array['event'], $array['interpreter_class']);

        $id = $this->importerEvent->id;
        $this->importerEventService->delete($this->importerEvent);

        $this->assertNull(ImporterEvent::find($id));
        Storage::disk('import')->assertMissing($this->importerEvent->id);
    }

    /**
     * @param string $interpreter
     * @param string $filename
     * @return bool
     */
    private function createWithInterpreter(string $interpreter = ImporterInterpreterPhp::class, string $filename = 'importer_php.zip'): bool
    {
        $array = [
            'name' => null,
            'event' => ImporterEventEvent::EVENT_IMPORT,
            'interpreter_class' => $interpreter,
        ];

        $this->importerEvent = $this->createBasicImporterEvent($array['event'], $array['interpreter_class'], $array['name'], $filename);

        $this->assertInstanceOf(ImporterEvent::class, $this->importerEvent);

        $this->assertEquals($array['name'], $this->importerEvent->name);
        $this->assertEquals($array['event'], $this->importerEvent->event);
        $this->assertEquals($array['interpreter_class'], $this->importerEvent->interpreter_class);
        $this->assertEquals(ActiveStatus::ACTIVE, $this->importerEvent->is_active);

        Storage::disk('import')->assertExists($this->importerEvent->id)->deleteDirectory($this->importerEvent->id);
        return true;
    }

    private function createBasicImporterEvent(int $event, string $interpreter, string $name = null, string $filename = 'importer_php.zip'): ImporterEvent
    {
        $storage = Storage::disk('examples');
        $uploadedFile = UploadedFile::fake()->createWithContent($filename, file_get_contents($storage->path($filename)));

        $eventDto = new ImporterEventDto(
            $this->importer,
            new ImporterEventEvent($event),
            new ImporterEventInterpreter($interpreter)
        );

        $eventDto->setName($name);

        return $this->importerEventService->create(
            $eventDto,
            $uploadedFile
        );
    }
}
